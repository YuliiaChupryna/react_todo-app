{"version":3,"sources":["TodoList.js","Footer.js","NewTodo.js","App.js","index.js"],"names":["TodoList","state","editingTodoTitle","editingTodoId","startEditing","id","title","_this","setState","prevState","handleTodoChange","_ref","value","target","saveEditedTodo","todo","_this$props","props","removeTodo","editTodo","trim","handleKeyPress","event","key","_this2","this","_this$props2","todos","setTodoCompleted","_this$state","react_default","a","createElement","className","map","type","onClick","checked","completed","onDoubleClick","autoFocus","onChange","onKeyUp","onBlur","React","Component","Footer","allTodos","filter","setFilter","clearCompletedTodos","length","filterName","href","concat","split","letter","i","toUpperCase","join","some","NewTodo","newTodoTitle","handleOnChange","toSubmit","preventDefault","addTodo","onSubmit","placeholder","App","currentFilter","maxId","Object","toConsumableArray","objectSpread2","setAllTodosCompleted","editedTodoTitle","visibleTodos","src_NewTodo","every","htmlFor","src_TodoList","src_Footer","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.cdaabc0c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoList extends React.Component {\n  state = {\n    editingTodoTitle: '',\n    editingTodoId: 0,\n  };\n\n  startEditing = (id, title) => {\n    this.setState(prevState => ({\n      editingTodoTitle: title,\n      editingTodoId: id,\n    }));\n  };\n\n  handleTodoChange = ({ target: { value } }) => {\n    this.setState(prevState => ({\n      editingTodoTitle: value,\n    }));\n  };\n\n  saveEditedTodo = (todo) => {\n    const { removeTodo, editTodo } = this.props;\n    const { editingTodoTitle } = this.state;\n\n    if (editingTodoTitle.trim()) {\n      editTodo(todo.id, editingTodoTitle.trim());\n\n      this.setState(prevState => ({\n        editingTodoTitle: '',\n        editingTodoId: 0,\n      }));\n    } else {\n      removeTodo(todo.id);\n    }\n  };\n\n  handleKeyPress = (event, todo) => {\n    if (event.key === 'Enter') {\n      this.saveEditedTodo(todo);\n    }\n\n    if (event.key === 'Escape') {\n      this.setState(prevState => ({\n        editingTodoTitle: '',\n        editingTodoId: 0,\n      }));\n    }\n  };\n\n  render() {\n    const { todos, setTodoCompleted, removeTodo } = this.props;\n    const { editingTodoTitle, editingTodoId } = this.state;\n\n    return (\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <li className={editingTodoId === todo.id ? 'editing' : ''}>\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                onClick={() => setTodoCompleted(todo.id)}\n                checked={todo.completed}\n              />\n              <label\n                onDoubleClick={() => this.startEditing(todo.id, todo.title)}\n              >\n                {todo.title}\n              </label>\n              <button\n                onClick={() => removeTodo(todo.id)}\n                type=\"button\"\n                className=\"destroy\"\n              />\n            </div>\n            {editingTodoId === todo.id && (\n              <input\n                type=\"text\"\n                className=\"edit\"\n                autoFocus\n                value={editingTodoTitle}\n                onChange={this.handleTodoChange}\n                onKeyUp={event => this.handleKeyPress(event, todo)}\n                onBlur={() => this.saveEditedTodo(todo)}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.oneOfType([PropTypes.object]).isRequired,\n  setTodoCompleted: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Footer = (props) => {\n  const { allTodos, filter, setFilter, clearCompletedTodos } = props;\n  const filterNames = ['all', 'active', 'completed'];\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {allTodos.filter(todo => !todo.completed).length}\n        {' '}\n        items left\n      </span>\n\n      <ul className=\"filters\">\n        {filterNames.map(filterName => (\n          <li>\n            <a\n              href={`#/${filterName}`}\n              onClick={() => setFilter(filterName)}\n              className={filter === filterName ? 'selected' : ''}\n            >\n              {filterName\n                .split('')\n                .map((letter, i) => (i === 0 ? letter.toUpperCase() : letter))\n                .join('')}\n            </a>\n          </li>\n        ))}\n      </ul>\n\n      {allTodos.some(todo => todo.completed) && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={clearCompletedTodos}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  allTodos: PropTypes.oneOfType([PropTypes.object]).isRequired,\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  clearCompletedTodos: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends React.Component {\n  state = {\n    newTodoTitle: '',\n  };\n\n  handleOnChange = ({ target: { value } }) => {\n    this.setState(prevState => ({ newTodoTitle: value }));\n  };\n\n  toSubmit = (event) => {\n    event.preventDefault();\n\n    const { newTodoTitle } = this.state;\n    const { addTodo } = this.props;\n\n    addTodo(newTodoTitle);\n\n    this.setState({\n      newTodoTitle: '',\n    });\n  };\n\n  render() {\n    const { newTodoTitle } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={this.toSubmit}>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodoTitle}\n            onChange={this.handleOnChange}\n            onBlur={this.toSubmit}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nNewTodo.propTypes = { addTodo: PropTypes.func.isRequired };\n\nexport default NewTodo;\n","import React from 'react';\nimport TodoList from './TodoList';\nimport Footer from './Footer';\nimport NewTodo from './NewTodo';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    currentFilter: 'all',\n    maxId: 0,\n  };\n\n  addTodo = (title) => {\n    if (title.trim()) {\n      this.setState(prevState => ({\n        todos: [...prevState.todos, {\n          title: title.trim(),\n          id: prevState.maxId + 1,\n          completed: false,\n        }],\n        maxId: prevState.maxId + 1,\n      }));\n    }\n  };\n\n  setTodoCompleted = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              completed: !todo.completed,\n            };\n          }\n\n          return { ...todo };\n        }),\n    }));\n  };\n\n  removeTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  };\n\n  setAllTodosCompleted = (checked) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        {\n          ...todo,\n          completed: checked,\n        }\n      )),\n    }));\n  };\n\n  setFilter = (filter) => {\n    this.setState(prevState => ({ currentFilter: filter }));\n  };\n\n  clearCompletedTodos = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  };\n\n  editTodo = (editingTodoId, editedTodoTitle) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (editingTodoId === todo.id) {\n          return {\n            ...todo,\n            title: editedTodoTitle,\n          };\n        }\n\n        return {\n          ...todo,\n        };\n      }),\n    }));\n  };\n\n  render() {\n    const { currentFilter, todos } = this.state;\n    let visibleTodos;\n\n    switch (currentFilter) {\n      case 'active':\n        visibleTodos = todos.filter(todo => !todo.completed);\n        break;\n      case 'completed':\n        visibleTodos = todos.filter(todo => todo.completed);\n        break;\n      default:\n        visibleTodos = [...todos];\n        break;\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={event => this.setAllTodosCompleted(event.target.checked)}\n            checked={\n              todos.length && todos.every(todo => todo.completed)\n            }\n          />\n\n          {todos.length !== 0\n          && <label htmlFor=\"toggle-all\">Mark all as completed</label>}\n          <TodoList\n            todos={visibleTodos}\n            setTodoCompleted={this.setTodoCompleted}\n            removeTodo={this.removeTodo}\n            editTodo={this.editTodo}\n          />\n        </section>\n\n        {todos.length !== 0\n        && (\n          <Footer\n            allTodos={todos}\n            filter={currentFilter}\n            setFilter={this.setFilter}\n            clearCompletedTodos={this.clearCompletedTodos}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}