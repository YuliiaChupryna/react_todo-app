{"version":3,"sources":["TodoList.js","Footer.js","NewTodo.js","App.js","index.js"],"names":["TodoList","state","editingTodoTitle","editingTodoId","startEditing","id","title","_this","setState","prevState","handleTodoChange","_ref","value","target","saveEditedTodo","todo","_this$props","props","removeTodo","editTodo","trim","handleKeyPress","event","key","_this2","this","_this$props2","todos","setTodoCompleted","_this$state","react_default","a","createElement","className","map","type","onClick","checked","completed","onDoubleClick","onChange","onKeyUp","onBlur","React","Component","Footer","allTodos","filter","setFilter","clearCompletedTodos","length","filterName","href","concat","split","letter","i","toUpperCase","join","some","NewTodo","newTodoTitle","handleOnChange","toSubmit","preventDefault","addTodo","onSubmit","placeholder","App","currentFilter","maxId","Object","toConsumableArray","objectSpread2","setAllTodosCompleted","todoId","editedTodoTitle","visibleTodos","src_NewTodo","every","htmlFor","src_TodoList","src_Footer","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.f71666ac.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoList extends React.Component {\n  state = {\n    editingTodoTitle: '',\n    editingTodoId: 0,\n  };\n\n  startEditing = (id, title) => {\n    this.setState(prevState => ({\n      editingTodoTitle: title,\n      editingTodoId: id,\n    }));\n  };\n\n  handleTodoChange = ({ target: { value } }) => {\n    this.setState(prevState => ({\n      editingTodoTitle: value,\n    }));\n  };\n\n  saveEditedTodo = (todo) => {\n    const { removeTodo, editTodo } = this.props;\n    const { editingTodoTitle } = this.state;\n\n    if (editingTodoTitle.trim()) {\n      editTodo(todo.id, editingTodoTitle.trim());\n\n      this.setState(prevState => ({\n        editingTodoTitle: '',\n        editingTodoId: 0,\n      }));\n    } else {\n      removeTodo(todo.id);\n    }\n  };\n\n  handleKeyPress = (event, todo) => {\n    if (event.key === 'Enter') {\n      this.saveEditedTodo(todo);\n    }\n\n    if (event.key === 'Escape') {\n      this.setState(prevState => ({\n        editingTodoTitle: '',\n        editingTodoId: 0,\n      }));\n    }\n  };\n\n  render() {\n    const { todos, setTodoCompleted, removeTodo } = this.props;\n    const { editingTodoTitle, editingTodoId } = this.state;\n\n    return (\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <li className={editingTodoId === todo.id ? 'editing' : ''}>\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                onClick={() => setTodoCompleted(todo.id)}\n                checked={todo.completed}\n              />\n              <label\n                onDoubleClick={() => this.startEditing(todo.id, todo.title)}\n              >\n                {todo.title}\n              </label>\n              <button\n                onClick={() => removeTodo(todo.id)}\n                type=\"button\"\n                className=\"destroy\"\n              />\n            </div>\n            {editingTodoId === todo.id && (\n              <input\n                type=\"text\"\n                className=\"edit\"\n                value={editingTodoTitle}\n                onChange={this.handleTodoChange}\n                onKeyUp={event => this.handleKeyPress(event, todo)}\n                onBlur={() => this.saveEditedTodo(todo)}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.oneOfType([PropTypes.object]).isRequired,\n  setTodoCompleted: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Footer = (props) => {\n  const { allTodos, filter, setFilter, clearCompletedTodos } = props;\n  const filterNames = ['all', 'active', 'completed'];\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {allTodos.filter(todo => !todo.completed).length}\n        {' '}\n        items left\n      </span>\n\n      <ul className=\"filters\">\n        {filterNames.map(filterName => (\n          <li>\n            <a\n              href={`#/${filterName}`}\n              onClick={() => setFilter(filterName)}\n              className={filter === filterName ? 'selected' : ''}\n            >\n              {filterName\n                .split('')\n                .map((letter, i) => (i === 0 ? letter.toUpperCase() : letter))\n                .join('')}\n            </a>\n          </li>\n        ))}\n      </ul>\n\n      {allTodos.some(todo => todo.completed) && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={clearCompletedTodos}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  allTodos: PropTypes.oneOfType([PropTypes.object]).isRequired,\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  clearCompletedTodos: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends React.Component {\n  state = {\n    newTodoTitle: '',\n  };\n\n  handleOnChange = ({ target: { value } }) => {\n    this.setState(prevState => ({ newTodoTitle: value }));\n  };\n\n  toSubmit = (event) => {\n    event.preventDefault();\n\n    const { newTodoTitle } = this.state;\n    const { addTodo } = this.props;\n\n    addTodo(newTodoTitle);\n\n    this.setState({\n      newTodoTitle: '',\n    });\n  };\n\n  render() {\n    const { newTodoTitle } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={this.toSubmit}>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodoTitle}\n            onChange={this.handleOnChange}\n            onBlur={this.toSubmit}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nNewTodo.propTypes = { addTodo: PropTypes.func.isRequired };\n\nexport default NewTodo;\n","import React from 'react';\nimport TodoList from './TodoList';\nimport Footer from './Footer';\nimport NewTodo from './NewTodo';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    currentFilter: 'all',\n    maxId: 0,\n  };\n\n  addTodo = (title) => {\n    if (title.trim()) {\n      this.setState(prevState => ({\n        todos: [...prevState.todos, {\n          title: title.trim(),\n          id: prevState.maxId + 1,\n          completed: false,\n        }],\n        maxId: prevState.maxId + 1,\n      }));\n    }\n  };\n\n  setTodoCompleted = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              completed: !todo.completed,\n            };\n          }\n\n          return { ...todo };\n        }),\n    }));\n  };\n\n  removeTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  };\n\n  setAllTodosCompleted = (checked) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        {\n          ...todo,\n          completed: checked,\n        }\n      )),\n    }));\n  };\n\n  setFilter = (filter) => {\n    this.setState(prevState => ({ currentFilter: filter }));\n  };\n\n  clearCompletedTodos = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  };\n\n  editTodo = (todoId, editedTodoTitle) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todoId === todo.id) {\n          return {\n            ...todo,\n            title: editedTodoTitle,\n          };\n        }\n\n        return {\n          ...todo,\n        };\n      }),\n    }));\n  };\n\n  render() {\n    const { currentFilter, todos } = this.state;\n    let visibleTodos;\n\n    switch (currentFilter) {\n      case 'active':\n        visibleTodos = todos.filter(todo => !todo.completed);\n        break;\n      case 'completed':\n        visibleTodos = todos.filter(todo => todo.completed);\n        break;\n      default:\n        visibleTodos = [...todos];\n        break;\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={event => this.setAllTodosCompleted(event.target.checked)}\n            checked={\n              todos.length && todos.every(todo => todo.completed)\n            }\n          />\n\n          {todos.length !== 0\n          && <label htmlFor=\"toggle-all\">Mark all as completed</label>}\n          <TodoList\n            todos={visibleTodos}\n            setTodoCompleted={this.setTodoCompleted}\n            removeTodo={this.removeTodo}\n            editTodo={this.editTodo}\n          />\n        </section>\n\n        {todos.length !== 0\n        && (\n          <Footer\n            allTodos={todos}\n            filter={currentFilter}\n            setFilter={this.setFilter}\n            clearCompletedTodos={this.clearCompletedTodos}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}